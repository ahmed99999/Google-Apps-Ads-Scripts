<head>
<title>Variations</title>
<meta charset="UTF-8"/>
<style>
textarea{
	min-width : 400px;
	min-height : 400px;
}
</style>
</head>
<body>


</body>
<script>

var variationsWithRepetion = ( function(){
	var res;
	function variations( arr, k, index, current ){
		if( k === index ){
			return res.push( current.slice() );
		}
		for( var i = 0; i < arr.length; i += 1 ){
			current[ index ] = arr[ i ];
			arr1 = arr.slice();
			arr1.splice( i, 1 );
			variations( arr1, k, index + 1, current );
		}
	}
	/**
	 * Finds all the variations with repetition of given array.<br><br>
	 * Variations with repetition is the number of ways to sample k elements
	 * from a set of elements (which may be repeated).
	 *
	 * @example
	 * var variations = require('path-to-algorithms/src/combinatorics/' +
	 * 'variations-repetition').variationsWithRepetion;
	 * var result = variations(['apple', 'orange', 'pear'], 2);
	 *
	 * // [['apple', 'apple'],
	 * //  ['apple', 'orange'],
	 * //  ['apple', 'pear'],
	 * //  ['orange', 'apple'],
	 * //  ['orange', 'orange'],
	 * //  ['orange', 'pear'],
	 * //  ['pear', 'apple'],
	 * //  ['pear', 'orange'],
	 * //  ['pear', 'pear']]
	 * console.log(result);
	 *
	 * @module combinatorics/variations-repetition
	 * @public
	 * @param arr {Array} Set of items.
	 * @param k {Number} Size of each combination.
	 * @return {Array} Returns all combinations.
	 */
	return function( arr, k ){
		res = [];
		variations( arr, k, 0, [] );
		var temp = res;
		res = undefined;
		return temp;
	};
}());

/*
var merchant = [
	'merchant',
	'id',
	'center',
	'account',
	'of',
	'the',
	'identifier',
	'mc',
	'mca',
	'number',
];
*/
var country = [
	'country',
	'countries',
	'territory',
	'of',
	'sale',
	'sales',
];

var priority = [
	'prio',
	'priority',
	'campaign',
]

function findVariations( bagOfWords ){
	var combiners = [ ' ', '-', '_', '/', '' ];
	var res = [];
	for( var countWords = 2; countWords < 5; countWords++ ){
		combiners.forEach( combiner => {
			if( countWords > 1 || combiner == '' ){
				var variations = variationsWithRepetion( bagOfWords, countWords );
				res = res.concat( variations.map( x => x.join( combiner ) ) );
			}
		});
	}

	return res;
}
var vars = []
	.concat( findVariations( country ) )
	.concat( findVariations( priority ) )
;

console.log(
	vars.map( x => '"' + x + '" : 1,' ).join( '\n' )
);

</script>